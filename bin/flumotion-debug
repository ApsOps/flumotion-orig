#!/usr/bin/env python
# -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

# Flumotion - a streaming media server
# Copyright (C) 2004,2005,2006,2007,2008,2009 Fluendo, S.L.
# Copyright (C) 2010,2011 Flumotion Services, S.A.
# All rights reserved.
#
# This file may be distributed and/or modified under the terms of
# the GNU Lesser General Public License version 2.1 as published by
# the Free Software Foundation.
# This file is distributed without any warranty; without even the implied
# warranty of merchantability or fitness for a particular purpose.
# See "LICENSE.LGPL" in the source distribution for more information.
#
# Headers in this file shall remain intact.


import os
import sys

import code

# Variable templates
LIBDIR = '/opt/flumotion//lib'
PROGRAM_PATH = 'flumotion.manager.main.main'

# setup the project root
dirx = os.path.dirname(os.path.abspath(__file__))
if os.path.exists(os.path.join(dirx, '..', 'flumotion', '.svn')):
    root = os.path.split(dirx)[0]
else:
    root = os.path.join(LIBDIR, 'flumotion', 'python')
sys.path.insert(0, root)

from flumotion.common import setup
from flumotion.common import bundle, config, errors, interfaces, log, registry
from flumotion.common.options import OptionParser
from flumotion.manager.manager import Vishnu
from flumotion.manager.admin import AdminAvatar

class FakeTransport:
    def getPeer(self):
        from twisted.internet.address import IPv4Address
        return IPv4Address('TCP', 'nullhost', 1)
    getHost = getPeer

class FakeBroker:
    def __init__(self):
        self.transport = FakeTransport()

class FakeMind:
    def __init__(self):
        self.broker = FakeBroker()

    def notifyOnDisconnect(self, proc):
        pass

def _setup(ns):
    setup.setupPackagePath()

    ns['vishnu'] = vishnu = Vishnu('debug')
    ns['adminAvatar'] = AdminAvatar(vishnu.adminHeaven,
                                    'admin', None, FakeMind())

def main(args):
    parser = OptionParser()
    parser.add_option('-c', '--command',
                     action="store", type="string", dest="command",
                     help="ogram passed in as string (terminates option list)")
    options, args = parser.parse_args(args)

    ns = globals().copy()

    _setup(ns)

    if options.command:
        exec options.command in ns
        return

    code.interact('flumotion', local=ns)

main(sys.argv)
