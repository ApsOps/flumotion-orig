#!/usr/bin/python
# -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

# Flumotion - a streaming media server
# Copyright (C) 2007 Zaheer Abbas Merali <zaheerabbas at merali dot org>
# Copyright (C) 2008,2009 Fluendo, S.L.
# Copyright (C) 2010,2011 Flumotion Services, S.A.
# All rights reserved.
#
# This file may be distributed and/or modified under the terms of
# the GNU Lesser General Public License version 2.1 as published by
# the Free Software Foundation.
# This file is distributed without any warranty; without even the implied
# warranty of merchantability or fitness for a particular purpose.
# See "LICENSE.LGPL" in the source distribution for more information.
#
# Headers in this file shall remain intact.


from flumotion.component import feed
from twisted.internet import reactor
from flumotion.twisted import pb
from flumotion.common import log
import os
import sys
import string
import gobject
gobject.threads_init()
import gst
import optparse

def usage(args, exitval=0):
    print "usage: %s [OPTIONS] -w WORKER -p FEEDERPORT " \
        "-U username -P password -f FULLFEEDID " \
        "<partial_pipeline>" % args[0]
    print ''
    print 'partial_pipeline is the part of the pipeline that will receive ' \
        'the gdp encoded stream'
    print 'e.g. fdsink fd=1'
    print 'streams the gdp encoded stream to stdout'
    print 'See %s -h for help on the available options.' % args[0]
    sys.exit(exitval)

def gotFeed(res, partial_pipeline):
    if not res:
        log.debug("output-feed", "got None in gotFeed")
        reactor.stop()
        return
    (feedId, fd) = res
    log.debug("output-feed","Got feed on fd %r for feedId %s" % (fd, feedId))
    pipe = gst.parse_launch("fdsrc fd=%d ! %s" % (fd, partial_pipeline))
    pipe.set_state(gst.STATE_PLAYING)

def main(args):
    log.init()

    parser = optparse.OptionParser()
    parser.add_option('-d', '--debug',
                      action="store", type="string", dest="debug",
                      help="set debug levels")
    parser.add_option('-u', '--usage',
                      action="store_true", dest="usage",
                      help="show a usage message")
    parser.add_option('-w', '--worker',
                      action="store", type="string", dest="host",
                      help="the host of the worker to connect to"
                        ", e.g. localhost")
    parser.add_option('-p', '--port',
                      action="store", type="int", dest="port",
                      help="the feeder port of the job's feeder")
    parser.add_option('-U', '--username',
                      action="store", type="string", dest="username",
                      help="the username to log into the feed server")
    parser.add_option('-P', '--password',
                      action="store", type="string", dest="password",
                      help="the password to log into the feed server")
    parser.add_option('-f', '--feed-id',
                      action="store", type="string", dest="feedId",
                      help="the full feed id of the feed to connect to"
                        ", e.g. /default/video-source:default")

    options, args = parser.parse_args(args)

    if options.debug:
        log.setFluDebug(options.debug)

    if options.usage or not args[1:]:
        usage(args)

    if not options.host or not options.port or not options.username or not \
        options.password or not options.feedId:
        usage(args)

    client = feed.FeedMedium(logName="output-feed-script")
    authenticator = pb.Authenticator(username=options.username,
        password=options.password)
    d = client.requestFeed(options.host, options.port, authenticator,
        options.feedId)
    d.addCallback(gotFeed, string.join(args[1:], ' '))
    reactor.run()

main(sys.argv)
